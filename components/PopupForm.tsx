"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { IMaskInput } from "react-imask";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { motion, AnimatePresence } from "framer-motion";

export default function PopupForm({ children }: { children?: React.ReactNode }) {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [shake, setShake] = useState(false);
  const [attempt, setAttempt] = useState(0);

  const isPhoneComplete = /^\+7 \(\d{3}\) \d{3}-\d{2}-\d{2}$/.test(phone);
  const isFormValid = name.trim() !== "" && isPhoneComplete;

  async function sendForm(data: FormData) {
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫ –æ–∂–∏–¥–∞–Ω–∏—è

    try {
      const response = await fetch("https://formspree.io/f/xzzkejep", {
        method: "POST",
        body: data,
        headers: { Accept: "application/json" },
        signal: controller.signal,
      });

      clearTimeout(timeout);
      return response;
    } catch (err: any) {
      clearTimeout(timeout);
      throw err;
    }
  }

  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault();

    if (!isFormValid) {
      setShake(true);
      toast.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã ‚ö†Ô∏è", {
        description: !name
          ? "–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
          : !isPhoneComplete
          ? "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
          : "",
      });
      setTimeout(() => setShake(false), 500);
      return;
    }

    setLoading(true);
    const form = e.currentTarget;
    const data = new FormData(form);

    try {
      const response = await sendForm(data);

      if (response.ok) {
        const id = toast.success("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", {
          description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
          action: {
            label: "–û–∫",
            onClick: () => toast.dismiss(id),
          },
        });

        form.reset();
        setName("");
        setPhone("");
        setAttempt(0);
        setTimeout(() => setOpen(false), 800);
      } else {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
      }
    } catch (error: any) {
      if (error.name === "AbortError") {
        if (attempt < 1) {
          toast.warning("–°–µ—Ä–≤–µ—Ä –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚è≥", {
            description: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...",
          });
          setAttempt((prev) => prev + 1);
          setTimeout(() => handleSubmit(e), 3000);
        } else {
          toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É üòï", {
            description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
          });
          setAttempt(0);
          setTimeout(() => setOpen(false), 1500);
        }
      } else {
        toast.warning("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", {
          description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
        });
      }
    } finally {
      setLoading(false);
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children ? (
          children
        ) : (
          <Button
            size="lg"
            className="gap-2 cursor-pointer select-none transition active:scale-[0.98]"
          >
            –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
          </Button>
        )}
      </DialogTrigger>

      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="grid gap-4 py-4">
          <AnimatePresence>
            <motion.div
              key="form"
              animate={shake ? { x: [-8, 8, -6, 6, -3, 3, 0] } : {}}
              transition={{ duration: 0.5 }}
            >
              {/* –ò–º—è */}
              <div className="grid gap-2">
                <Label htmlFor="name">–ò–º—è*</Label>
                <Input
                  id="name"
                  name="–ò–º—è"
                  required
                  placeholder="–í–∞—à–µ –∏–º—è"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
              </div>

              {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
              <div className="grid gap-2 mt-3">
                <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω*</Label>
                <IMaskInput
                  mask="+7 (000) 000-00-00"
                  id="phone"
                  name="–¢–µ–ª–µ—Ñ–æ–Ω"
                  placeholder="+7 (999) 616-44-37"
                  required
                  value={phone}
                  onAccept={(value: any) => setPhone(value)}
                  className="border border-input bg-background px-3 py-2 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary"
                />
                {!isPhoneComplete && phone.length > 0 && (
                  <p className="text-sm text-red-500">
                    –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                  </p>
                )}
              </div>

              {/* Email */}
              <div className="grid gap-2 mt-3">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  name="Email"
                  type="email"
                  placeholder="user@mail.ru"
                />
              </div>

              {/* –ò–Ω—Ç–µ—Ä–µ—Å */}
              <div className="grid gap-2 mt-3">
                <Label>–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</Label>
                <Select name="–ò–Ω—Ç–µ—Ä–µ—Å">
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ —Å–µ–±–µ">–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ —Å–µ–±–µ</SelectItem>
                    <SelectItem value="–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é">–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é</SelectItem>
                    <SelectItem value="–†–∞—Å—Ç–∞–º–æ–∂–∫–∞">–†–∞—Å—Ç–∞–º–æ–∂–∫–∞</SelectItem>
                    <SelectItem value="–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ">–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ</SelectItem>
                    <SelectItem value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ */}
              <Button
                type="submit"
                className="w-full mt-4 flex items-center justify-center gap-2"
              >
                {loading && <Loader2 className="h-4 w-4 animate-spin" />}
                {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
              </Button>
            </motion.div>
          </AnimatePresence>
        </form>
      </DialogContent>
    </Dialog>
  );
}
